{"version":3,"sources":["../package.json","../src/index.ts","../src/witness.ts","../src/utils/types.ts","../src/Reclaim.ts","../src/utils/errors.ts","../src/utils/logger.ts","../src/utils/helper.ts","../src/utils/constants.ts","../src/utils/validationUtils.ts","../src/utils/sessionUtils.ts","../src/utils/proofUtils.ts","../src/contract-types/contracts/factories/Reclaim__factory.ts","../src/contract-types/config.json","../src/smart-contract.ts"],"sourcesContent":["{\n  \"name\": \"@reclaimprotocol/js-sdk\",\n  \"version\": \"3.0.1\",\n  \"description\": \"Designed to request proofs from the Reclaim protocol and manage the flow of claims and witness interactions.\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"keywords\": [\n    \"reclaim\",\n    \"protocol\",\n    \"blockchain\",\n    \"proof\",\n    \"verification\",\n    \"identity\",\n    \"claims\",\n    \"witness\",\n    \"sdk\",\n    \"javascript\",\n    \"typescript\",\n    \"decentralized\",\n    \"web3\"\n  ],\n  \"files\": [\n    \"dist\"\n  ],\n  \"tsup\": {\n    \"entry\": [\n      \"src/index.ts\"\n    ],\n    \"splitting\": false,\n    \"sourcemap\": true,\n    \"clean\": true\n  },\n  \"scripts\": {\n    \"build\": \"sh scripts/build.sh\",\n    \"release\": \"release-it\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"commitlint\": \"commitlint --edit\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/reclaimprotocol/reclaim-js-sdk\"\n  },\n  \"author\": \"ali <ali@creatoros.co>\",\n  \"license\": \"See License in <https://github.com/reclaimprotocol/.github/blob/main/LICENSE>\",\n  \"bugs\": {\n    \"url\": \"https://github.com/reclaimprotocol/reclaim-js-sdk/issues\"\n  },\n  \"homepage\": \"https://github.com/reclaimprotocol/reclaim-js-sdk/\",\n  \"publishConfig\": {\n    \"registry\": \"https://registry.npmjs.org/\",\n    \"access\": \"public\"\n  },\n  \"release-it\": {\n    \"git\": {\n      \"commitMessage\": \"chore: release ${version}\",\n      \"tagName\": \"v${version}\"\n    },\n    \"npm\": {\n      \"publish\": true,\n      \"tag\": \"latest\"\n    },\n    \"github\": {\n      \"release\": true\n    },\n    \"plugins\": {\n      \"@release-it/conventional-changelog\": {\n        \"preset\": \"angular\"\n      }\n    }\n  },\n  \"devDependencies\": {\n    \"@bconnorwhite/bob\": \"^2.9.5\",\n    \"@commitlint/cli\": \"^17.7.1\",\n    \"@commitlint/config-conventional\": \"^17.7.0\",\n    \"@release-it/conventional-changelog\": \"^5.0.0\",\n    \"@types/qs\": \"^6.9.11\",\n    \"@types/url-parse\": \"^1.4.11\",\n    \"@types/uuid\": \"^9.0.7\",\n    \"release-it\": \"^15.0.0\",\n    \"tsup\": \"^8.0.1\",\n    \"typescript\": \"^5.3.3\"\n  },\n  \"dependencies\": {\n    \"canonicalize\": \"^2.0.0\",\n    \"ethers\": \"^6.9.1\",\n    \"qs\": \"^6.11.2\",\n    \"url-parse\": \"^1.5.10\",\n    \"uuid\": \"^9.0.1\"\n  }\n}\n","export * from './Reclaim';\nexport * from './utils/interfaces';\nexport { ClaimCreationType } from './utils/types';","import { ethers } from 'ethers';\nimport type { WitnessData } from './utils/interfaces';\nimport type { ClaimID, ClaimInfo, CompleteClaimData } from './utils/types';\n\ntype BeaconState = {\n  witnesses: WitnessData[];\n  epoch: number;\n  witnessesRequiredForClaim: number;\n  nextEpochTimestampS: number;\n};\n\nexport function fetchWitnessListForClaim(\n  { witnesses, witnessesRequiredForClaim, epoch }: BeaconState,\n  params: string | ClaimInfo,\n  timestampS: number\n): WitnessData[] {\n  const identifier: ClaimID =\n    typeof params === 'string' ? params : getIdentifierFromClaimInfo(params);\n  const completeInput: string = [\n    identifier,\n    epoch.toString(),\n    witnessesRequiredForClaim.toString(),\n    timestampS.toString(),\n  ].join('\\n');\n  const completeHashStr: string = ethers.keccak256(strToUint8Array(completeInput));\n  const completeHash: Uint8Array = ethers.getBytes(completeHashStr);\n  const completeHashView: DataView = uint8ArrayToDataView(completeHash);\n  const witnessesLeft: WitnessData[] = [...witnesses];\n  const selectedWitnesses: WitnessData[] = [];\n  let byteOffset: number = 0;\n  for (let i = 0; i < witnessesRequiredForClaim; i++) {\n    const randomSeed: number = completeHashView.getUint32(byteOffset);\n    const witnessIndex: number = randomSeed % witnessesLeft.length;\n    const witness: WitnessData = witnessesLeft[witnessIndex];\n    selectedWitnesses.push(witness);\n\n    witnessesLeft[witnessIndex] = witnessesLeft[witnessesLeft.length - 1];\n    witnessesLeft.pop();\n    byteOffset = (byteOffset + 4) % completeHash.length;\n  }\n\n  return selectedWitnesses;\n}\n\nexport function getIdentifierFromClaimInfo(info: ClaimInfo): ClaimID {\n  const str: string = `${info.provider}\\n${info.parameters}\\n${info.context || ''}`;\n  return ethers.keccak256(strToUint8Array(str)).toLowerCase();\n}\n\nexport function strToUint8Array(str: string): Uint8Array {\n  return new TextEncoder().encode(str);\n}\n\nexport function uint8ArrayToDataView(arr: Uint8Array): DataView {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n\nexport function createSignDataForClaim(data: CompleteClaimData): string {\n  const identifier: ClaimID =\n    'identifier' in data ? data.identifier : getIdentifierFromClaimInfo(data);\n  const lines: string[] = [\n    identifier,\n    data.owner.toLowerCase(),\n    data.timestampS.toString(),\n    data.epoch.toString(),\n  ];\n\n  return lines.join('\\n');\n}\n","import type { Context, Proof, ProviderClaimData } from './interfaces';\nimport type { ParsedQs } from 'qs';\n\n// Claim-related types\nexport type ClaimID = ProviderClaimData['identifier'];\n\nexport type ClaimInfo = Pick<ProviderClaimData, 'context' | 'provider' | 'parameters'>;\n\nexport type AnyClaimInfo = ClaimInfo | { identifier: ClaimID };\n\nexport type CompleteClaimData = Pick<ProviderClaimData, 'owner' | 'timestampS' | 'epoch'> & AnyClaimInfo;\n\nexport type SignedClaim = {\n  claim: CompleteClaimData;\n  signatures: Uint8Array[];\n};\n\n// Request and session-related types\nexport type CreateVerificationRequest = {\n  providerIds: string[];\n  applicationSecret?: string;\n};\n\nexport type StartSessionParams = {\n  onSuccess: OnSuccess;\n  onError: OnError;\n};\n\nexport type OnSuccess = (proof?: Proof | Proof[] | string) => void;\nexport type OnError = (error: Error) => void;\n\nexport type ProofRequestOptions = {\n  log?: boolean;\n  acceptAiProviders?: boolean;\n  useAppClip?: boolean;\n  device?: string;\n  envUrl?: string;\n};\n\n// Claim creation type enum\nexport enum ClaimCreationType {\n  STANDALONE = 'createClaim',\n  ON_ME_CHAIN = 'createClaimOnMechain'\n}\n\n// Session and response types\nexport type InitSessionResponse = {\n  sessionId: string;\n};\n\nexport interface UpdateSessionResponse {\n  success: boolean;\n  message?: string;\n};\n\nexport enum SessionStatus {\n  SESSION_INIT = 'SESSION_INIT',\n  SESSION_STARTED = 'SESSION_STARTED',\n  USER_INIT_VERIFICATION = 'USER_INIT_VERIFICATION',\n  USER_STARTED_VERIFICATION = 'USER_STARTED_VERIFICATION',\n  PROOF_GENERATION_STARTED = 'PROOF_GENERATION_STARTED',\n  PROOF_GENERATION_SUCCESS = 'PROOF_GENERATION_SUCCESS',\n  PROOF_GENERATION_FAILED = 'PROOF_GENERATION_FAILED',\n  PROOF_SUBMITTED = 'PROOF_SUBMITTED',\n  PROOF_SUBMISSION_FAILED = 'PROOF_SUBMISSION_FAILED',\n  PROOF_MANUAL_VERIFICATION_SUBMITED = 'PROOF_MANUAL_VERIFICATION_SUBMITED',\n};\n\n// JSON and template-related types\nexport type ProofPropertiesJSON = {\n  applicationId: string;\n  providerId: string;\n  sessionId: string;\n  context: Context;\n  signature: string;\n  redirectUrl?: string;\n  parameters: { [key: string]: string };\n  timeStamp: string;\n  appCallbackUrl?: string;\n  claimCreationType?: ClaimCreationType;\n  options?: ProofRequestOptions;\n  sdkVersion: string;\n  jsonProofResponse?: boolean;\n};\n\nexport type TemplateData = {\n  sessionId: string;\n  providerId: string;\n  applicationId: string;\n  signature: string;\n  timestamp: string;\n  callbackUrl: string;\n  context: string;\n  parameters: { [key: string]: string };\n  redirectUrl: string;\n  acceptAiProviders: boolean;\n  sdkVersion: string;\n  jsonProofResponse?: boolean;\n};\n\n// Add the new StatusUrlResponse type\nexport type StatusUrlResponse = {\n  message: string;\n  session?: {\n    id: string;\n    appId: string;\n    httpProviderId: string[];\n    sessionId: string;\n    proofs?: Proof[];\n    statusV2: string;\n  };\n  providerId?: string;\n};","import type { Proof, Context } from './utils/interfaces'\nimport { getIdentifierFromClaimInfo } from './witness'\nimport {\n    SignedClaim,\n    ProofRequestOptions,\n    StartSessionParams,\n    ProofPropertiesJSON,\n    TemplateData,\n    InitSessionResponse,\n    ClaimCreationType,\n} from './utils/types'\nimport { SessionStatus } from './utils/types'\nimport { ethers } from 'ethers'\nimport canonicalize from 'canonicalize'\nimport {\n    replaceAll,\n    scheduleIntervalEndingTask\n} from './utils/helper'\nimport { constants, setBackendBaseUrl } from './utils/constants'\nimport {\n    AddContextError,\n    GetAppCallbackUrlError,\n    GetStatusUrlError,\n    InitError,\n    InvalidParamError,\n    ProofNotVerifiedError,\n    ProofSubmissionFailedError,\n    ProviderFailedError,\n    SessionNotStartedError,\n    SetParamsError,\n    SetSignatureError,\n    SignatureGeneratingError,\n    SignatureNotFoundError\n} from './utils/errors'\nimport { validateContext, validateFunctionParams, validateParameters, validateSignature, validateURL } from './utils/validationUtils'\nimport { fetchStatusUrl, initSession, updateSession } from './utils/sessionUtils'\nimport { assertValidSignedClaim, createLinkWithTemplateData, getWitnessesForClaim } from './utils/proofUtils'\nimport loggerModule from './utils/logger';\nconst logger = loggerModule.logger\n\nconst sdkVersion = require('../package.json').version;\n\n// Implementation\nexport async function verifyProof(proofOrProofs: Proof | Proof[]): Promise<boolean> {\n    // If input is an array of proofs\n    if (Array.isArray(proofOrProofs)) {\n        for (const proof of proofOrProofs) {\n            const isVerified = await verifyProof(proof);\n            if (!isVerified) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Single proof verification logic\n    const proof = proofOrProofs;\n    if (!proof.signatures.length) {\n        throw new SignatureNotFoundError('No signatures')\n    }\n\n    try {\n        // check if witness array exist and first element is manual-verify\n        let witnesses = []\n        if (proof.witnesses.length && proof.witnesses[0]?.url === 'manual-verify') {\n            witnesses.push(proof.witnesses[0].id)\n        } else {\n            witnesses = await getWitnessesForClaim(\n                proof.claimData.epoch,\n                proof.identifier,\n                proof.claimData.timestampS\n            )\n        }\n        // then hash the claim info with the encoded ctx to get the identifier\n        const calculatedIdentifier = getIdentifierFromClaimInfo({\n            parameters: JSON.parse(\n                canonicalize(proof.claimData.parameters) as string\n            ),\n            provider: proof.claimData.provider,\n            context: proof.claimData.context\n        })\n        proof.identifier = replaceAll(proof.identifier, '\"', '')\n        // check if the identifier matches the one in the proof\n        if (calculatedIdentifier !== proof.identifier) {\n            throw new ProofNotVerifiedError('Identifier Mismatch')\n        }\n\n        const signedClaim: SignedClaim = {\n            claim: {\n                ...proof.claimData\n            },\n            signatures: proof.signatures.map(signature => {\n                return ethers.getBytes(signature)\n            })\n        }\n\n        assertValidSignedClaim(signedClaim, witnesses)\n    } catch (e: Error | unknown) {\n        logger.info(`Error verifying proof: ${e instanceof Error ? e.message : String(e)}`)\n        return false\n    }\n\n    return true\n}\n\nexport function transformForOnchain(proof: Proof): { claimInfo: any, signedClaim: any } {\n    const claimInfoBuilder = new Map([\n        ['context', proof.claimData.context],\n        ['parameters', proof.claimData.parameters],\n        ['provider', proof.claimData.provider],\n    ]);\n    const claimInfo = Object.fromEntries(claimInfoBuilder);\n    const claimBuilder = new Map<string, number | string>([\n        ['epoch', proof.claimData.epoch],\n        ['identifier', proof.claimData.identifier],\n        ['owner', proof.claimData.owner],\n        ['timestampS', proof.claimData.timestampS],\n    ]);\n    const signedClaim = {\n        claim: Object.fromEntries(claimBuilder),\n        signatures: proof.signatures,\n    };\n    return { claimInfo, signedClaim };\n}\n\nexport class ReclaimProofRequest {\n    // Private class properties\n    private applicationId: string;\n    private signature?: string;\n    private appCallbackUrl?: string;\n    private sessionId: string;\n    private options?: ProofRequestOptions;\n    private context: Context = { contextAddress: '0x0', contextMessage: 'sample context' };\n    private claimCreationType?: ClaimCreationType = ClaimCreationType.STANDALONE;\n    private providerId: string;\n    private parameters: { [key: string]: string };\n    private redirectUrl?: string;\n    private intervals: Map<string, NodeJS.Timer> = new Map();\n    private timeStamp: string;\n    private sdkVersion: string;\n    private jsonProofResponse: boolean = false;\n    private lastFailureTime?: number;\n    private readonly FAILURE_TIMEOUT = 30000; // 30 seconds timeout, can be adjusted\n\n    // Private constructor\n    private constructor(applicationId: string, providerId: string, options?: ProofRequestOptions) {\n        this.providerId = providerId;\n        this.timeStamp = Date.now().toString();\n        this.applicationId = applicationId;\n        this.sessionId = \"\";\n        this.parameters = {};\n        if (options?.log) {\n            loggerModule.setLogLevel('info');\n        } else {\n            loggerModule.setLogLevel('silent');\n        }\n\n        if (options?.envUrl) {\n            setBackendBaseUrl(options.envUrl);\n        }\n        \n        this.options = options;\n        // Fetch sdk version from package.json\n        this.sdkVersion = 'js-' + sdkVersion;\n        logger.info(`Initializing client with applicationId: ${this.applicationId}`);\n    }\n\n    // Static initialization methods\n    static async init(applicationId: string, appSecret: string, providerId: string, options?: ProofRequestOptions): Promise<ReclaimProofRequest> {\n        try {\n            validateFunctionParams([\n                { paramName: 'applicationId', input: applicationId, isString: true },\n                { paramName: 'providerId', input: providerId, isString: true },\n                { paramName: 'appSecret', input: appSecret, isString: true }\n            ], 'the constructor')\n\n            // check if options is provided and validate each property of options\n            if (options) {\n                if (options.acceptAiProviders) {\n                    validateFunctionParams([\n                        { paramName: 'acceptAiProviders', input: options.acceptAiProviders }\n                    ], 'the constructor')\n                }\n                if (options.log) {\n                    validateFunctionParams([\n                        { paramName: 'log', input: options.log }\n                    ], 'the constructor')\n                }\n                if (options.useAppClip) {\n                    validateFunctionParams([\n                        { paramName: 'useAppClip', input: options.useAppClip }\n                    ], 'the constructor')\n                }\n                if (options.device) {\n                    validateFunctionParams([\n                        { paramName: 'device', input: options.device, isString: true }\n                    ], 'the constructor')\n                }\n                if (options.envUrl) {\n                    validateFunctionParams([\n                        { paramName: 'envUrl', input: options.envUrl, isString: true }\n                    ], 'the constructor')\n                }\n\n            }\n\n            const proofRequestInstance = new ReclaimProofRequest(applicationId, providerId, options)\n\n            const signature = await proofRequestInstance.generateSignature(appSecret)\n            proofRequestInstance.setSignature(signature)\n\n            const data: InitSessionResponse = await initSession(providerId, applicationId, proofRequestInstance.timeStamp, signature);\n            proofRequestInstance.sessionId = data.sessionId\n\n            return proofRequestInstance\n        } catch (error) {\n            logger.info('Failed to initialize ReclaimProofRequest', error as Error);\n            throw new InitError('Failed to initialize ReclaimProofRequest', error as Error)\n        }\n    }\n\n    static async fromJsonString(jsonString: string): Promise<ReclaimProofRequest> {\n        try {\n            const {\n                applicationId,\n                providerId,\n                sessionId,\n                context,\n                parameters,\n                signature,\n                redirectUrl,\n                timeStamp,\n                appCallbackUrl,\n                claimCreationType,\n                options,\n                sdkVersion,\n                jsonProofResponse\n            }: ProofPropertiesJSON = JSON.parse(jsonString)\n\n            validateFunctionParams([\n                { input: applicationId, paramName: 'applicationId', isString: true },\n                { input: providerId, paramName: 'providerId', isString: true },\n                { input: signature, paramName: 'signature', isString: true },\n                { input: sessionId, paramName: 'sessionId', isString: true },\n                { input: timeStamp, paramName: 'timeStamp', isString: true },\n                { input: sdkVersion, paramName: 'sdkVersion', isString: true },\n            ], 'fromJsonString');\n\n\n            if (redirectUrl) {\n                validateURL(redirectUrl, 'fromJsonString');\n            }\n\n            if (appCallbackUrl) {\n                validateURL(appCallbackUrl, 'fromJsonString');\n            }\n\n            if (context) {\n                validateContext(context);\n            }\n\n            if (parameters) {\n                validateParameters(parameters);\n            }\n\n            if (claimCreationType) {\n                validateFunctionParams([\n                    { input: claimCreationType, paramName: 'claimCreationType' }\n                ], 'fromJsonString');\n            }\n\n            if (jsonProofResponse !== undefined) {\n                validateFunctionParams([\n                    { input: jsonProofResponse, paramName: 'jsonProofResponse' }\n                ], 'fromJsonString');\n            }\n\n            const proofRequestInstance = new ReclaimProofRequest(applicationId, providerId, options);\n            proofRequestInstance.sessionId = sessionId;\n            proofRequestInstance.context = context;\n            proofRequestInstance.parameters = parameters;\n            proofRequestInstance.appCallbackUrl = appCallbackUrl\n            proofRequestInstance.redirectUrl = redirectUrl\n            proofRequestInstance.timeStamp = timeStamp\n            proofRequestInstance.signature = signature\n            proofRequestInstance.sdkVersion = sdkVersion;\n            return proofRequestInstance\n        } catch (error) {\n            logger.info('Failed to parse JSON string in fromJsonString:', error);\n            throw new InvalidParamError('Invalid JSON string provided to fromJsonString');\n        }\n    }\n\n    // Setter methods\n    setAppCallbackUrl(url: string, jsonProofResponse?: boolean): void {\n        validateURL(url, 'setAppCallbackUrl')\n        this.appCallbackUrl = url\n        this.jsonProofResponse = jsonProofResponse ?? false\n    }\n\n    setRedirectUrl(url: string): void {\n        validateURL(url, 'setRedirectUrl');\n        this.redirectUrl = url;\n    }\n\n    setClaimCreationType(claimCreationType: ClaimCreationType): void {\n        this.claimCreationType = claimCreationType;\n    }\n\n    addContext(address: string, message: string): void {\n        try {\n            validateFunctionParams([\n                { input: address, paramName: 'address', isString: true },\n                { input: message, paramName: 'message', isString: true }\n            ], 'addContext');\n            this.context = { contextAddress: address, contextMessage: message };\n        } catch (error) {\n            logger.info(\"Error adding context\", error)\n            throw new AddContextError(\"Error adding context\", error as Error)\n        }\n    }\n\n    setParams(params: { [key: string]: string }): void {\n        try {\n            validateParameters(params);\n            this.parameters = { ...this.parameters, ...params }\n        } catch (error) {\n            logger.info('Error Setting Params:', error);\n            throw new SetParamsError(\"Error setting params\", error as Error)\n        }\n    }\n\n    // Getter methods\n    getAppCallbackUrl(): string {\n        try {\n            validateFunctionParams([{ input: this.sessionId, paramName: 'sessionId', isString: true }], 'getAppCallbackUrl');\n            return this.appCallbackUrl || `${constants.DEFAULT_RECLAIM_CALLBACK_URL}${this.sessionId}`\n        } catch (error) {\n            logger.info(\"Error getting app callback url\", error)\n            throw new GetAppCallbackUrlError(\"Error getting app callback url\", error as Error)\n        }\n    }\n\n    getStatusUrl(): string {\n        try {\n            validateFunctionParams([{ input: this.sessionId, paramName: 'sessionId', isString: true }], 'getStatusUrl');\n            return `${constants.DEFAULT_RECLAIM_STATUS_URL}${this.sessionId}`\n        } catch (error) {\n            logger.info(\"Error fetching Status Url\", error)\n            throw new GetStatusUrlError(\"Error fetching status url\", error as Error)\n        }\n    }\n\n    // Private helper methods\n    private setSignature(signature: string): void {\n        try {\n            validateFunctionParams([{ input: signature, paramName: 'signature', isString: true }], 'setSignature');\n            this.signature = signature;\n            logger.info(`Signature set successfully for applicationId: ${this.applicationId}`);\n        } catch (error) {\n            logger.info(\"Error setting signature\", error)\n            throw new SetSignatureError(\"Error setting signature\", error as Error)\n        }\n    }\n\n    private async generateSignature(applicationSecret: string): Promise<string> {\n        try {\n            const wallet = new ethers.Wallet(applicationSecret)\n            const canonicalData = canonicalize({ providerId: this.providerId, timestamp: this.timeStamp });\n\n\n            if (!canonicalData) {\n                throw new SignatureGeneratingError('Failed to canonicalize data for signing.');\n            }\n\n            const messageHash = ethers.keccak256(new TextEncoder().encode(canonicalData));\n\n            return await wallet.signMessage(ethers.getBytes(messageHash));\n        } catch (err) {\n            logger.info(`Error generating proof request for applicationId: ${this.applicationId}, providerId: ${this.providerId}, signature: ${this.signature}, timeStamp: ${this.timeStamp}`, err);\n            throw new SignatureGeneratingError(`Error generating signature for applicationSecret: ${applicationSecret}`)\n        }\n    }\n\n    private clearInterval(): void {\n        if (this.sessionId && this.intervals.has(this.sessionId)) {\n            clearInterval(this.intervals.get(this.sessionId) as NodeJS.Timeout)\n            this.intervals.delete(this.sessionId)\n        }\n    }\n\n    // Public methods\n    toJsonString(options?: ProofRequestOptions): string {\n        return JSON.stringify({\n            applicationId: this.applicationId,\n            providerId: this.providerId,\n            sessionId: this.sessionId,\n            context: this.context,\n            appCallbackUrl: this.appCallbackUrl,\n            claimCreationType: this.claimCreationType,\n            parameters: this.parameters,\n            signature: this.signature,\n            redirectUrl: this.redirectUrl,\n            timeStamp: this.timeStamp,\n            options: this.options,\n            sdkVersion: this.sdkVersion,\n            jsonProofResponse: this.jsonProofResponse\n        })\n    }\n\n    async getRequestUrl(): Promise<string> {\n        logger.info('Creating Request Url')\n        if (!this.signature) {\n            throw new SignatureNotFoundError('Signature is not set.')\n        }\n\n        try {\n            validateSignature(this.providerId, this.signature, this.applicationId, this.timeStamp)\n\n            const templateData: TemplateData = {\n                sessionId: this.sessionId,\n                providerId: this.providerId,\n                applicationId: this.applicationId,\n                signature: this.signature,\n                timestamp: this.timeStamp,\n                callbackUrl: this.getAppCallbackUrl(),\n                context: JSON.stringify(this.context),\n                parameters: this.parameters,\n                redirectUrl: this.redirectUrl ?? '',\n                acceptAiProviders: this.options?.acceptAiProviders ?? false,\n                sdkVersion: this.sdkVersion,\n                jsonProofResponse: this.jsonProofResponse\n            }\n            await updateSession(this.sessionId, SessionStatus.SESSION_STARTED)\n            if (this.options?.useAppClip) {\n                let template = encodeURIComponent(JSON.stringify(templateData));\n                template = replaceAll(template, '(', '%28');\n                template = replaceAll(template, ')', '%29');\n\n                // check if the app is running on iOS or Android\n                const isIos = this.options?.device === 'ios';\n                if (!isIos) {\n                    const instantAppUrl = `https://share.reclaimprotocol.org/verify/?template=${template}`;\n                    logger.info('Instant App Url created successfully: ' + instantAppUrl);\n                    return instantAppUrl;\n                } else {\n                    const appClipUrl = `https://appclip.apple.com/id?p=org.reclaimprotocol.app.clip&template=${template}`;\n                    logger.info('App Clip Url created successfully: ' + appClipUrl);\n                    return appClipUrl;\n                }\n            } else {\n                const link = await createLinkWithTemplateData(templateData)\n                logger.info('Request Url created successfully: ' + link)\n                return link\n            }\n        } catch (error) {\n            logger.info('Error creating Request Url:', error)\n            throw error\n        }\n    }\n\n    async startSession({ onSuccess, onError }: StartSessionParams): Promise<void> {\n        if (!this.sessionId) {\n            const message = \"Session can't be started due to undefined value of sessionId\";\n            logger.info(message);\n            throw new SessionNotStartedError(message);\n        }\n\n        logger.info('Starting session');\n        const interval = setInterval(async () => {\n            try {\n                const statusUrlResponse = await fetchStatusUrl(this.sessionId);\n\n                if (!statusUrlResponse.session) return;\n\n                // Reset failure time if status is not PROOF_GENERATION_FAILED\n                if (statusUrlResponse.session.statusV2 !== SessionStatus.PROOF_GENERATION_FAILED) {\n                    this.lastFailureTime = undefined;\n                }\n\n                // Check for failure timeout\n                if (statusUrlResponse.session.statusV2 === SessionStatus.PROOF_GENERATION_FAILED) {\n                    const currentTime = Date.now();\n                    if (!this.lastFailureTime) {\n                        this.lastFailureTime = currentTime;\n                    } else if (currentTime - this.lastFailureTime >= this.FAILURE_TIMEOUT) {\n                        throw new ProviderFailedError('Proof generation failed - timeout reached');\n                    }\n                    return; // Continue monitoring if under timeout\n                }\n\n                const isDefaultCallbackUrl = this.getAppCallbackUrl() === `${constants.DEFAULT_RECLAIM_CALLBACK_URL}${this.sessionId}`;\n\n                if (isDefaultCallbackUrl) {\n                    if (statusUrlResponse.session.proofs && statusUrlResponse.session.proofs.length > 0) {\n                        const proofs = statusUrlResponse.session.proofs;\n                        if (this.claimCreationType === ClaimCreationType.STANDALONE) {\n                            const verified = await verifyProof(proofs);\n                            if (!verified) {\n                                logger.info(`Proofs not verified: ${JSON.stringify(proofs)}`);\n                                throw new ProofNotVerifiedError();\n                            }\n                        }\n                        // check if the proofs array has only one proof then send the proofs in onSuccess \n                        if (proofs.length === 1) {\n                            onSuccess(proofs[0]);\n                        } else {\n                            onSuccess(proofs);\n                        }\n                        this.clearInterval();\n                    }\n                } else {\n                    if (statusUrlResponse.session.statusV2 === SessionStatus.PROOF_SUBMISSION_FAILED) {\n                        throw new ProofSubmissionFailedError();\n                    }\n                    if (statusUrlResponse.session.statusV2 === SessionStatus.PROOF_SUBMITTED) {\n                        if (onSuccess) {\n                            onSuccess('Proof submitted successfully to the custom callback url');\n                        }\n                        this.clearInterval();\n                    }\n                }\n            } catch (e) {\n                if (onError) {\n                    onError(e as Error);\n                }\n                this.clearInterval();\n            }\n        }, 3000);\n\n        this.intervals.set(this.sessionId, interval);\n        scheduleIntervalEndingTask(this.sessionId, this.intervals, onError);\n    }\n}\n\n","function createErrorClass(name: string) {\n    return class extends Error {\n        constructor(message?: string, public innerError?: Error) {\n            // Include inner error message in the main message if available\n            const fullMessage = innerError \n                ? `${message || ''} caused by ${innerError.name}: ${innerError.message}`\n                : message;\n                \n            super(fullMessage);\n            this.name = name;\n            if (innerError) {\n                this.stack += `\\nCaused by: ${innerError.stack}`;\n            }\n        }\n    };\n}\n\nexport const TimeoutError = createErrorClass('TimeoutError');\nexport const ProofNotVerifiedError = createErrorClass('ProofNotVerifiedError');\nexport const SessionNotStartedError = createErrorClass('SessionNotStartedError');\nexport const ProviderNotFoundError = createErrorClass('ProviderNotFoundError');\nexport const SignatureGeneratingError = createErrorClass('SignatureGeneratingError');\nexport const SignatureNotFoundError = createErrorClass('SignatureNotFoundError');\nexport const InvalidSignatureError = createErrorClass('InvalidSignatureError');\nexport const UpdateSessionError = createErrorClass('UpdateSessionError');\nexport const InitSessionError = createErrorClass('InitSessionError');\nexport const ProviderFailedError = createErrorClass('ProviderFailedError');\nexport const InvalidParamError = createErrorClass('InvalidParamError');\nexport const ApplicationError = createErrorClass('ApplicationError');\nexport const InitError = createErrorClass('InitError');\nexport const BackendServerError = createErrorClass('BackendServerError');\nexport const GetStatusUrlError = createErrorClass('GetStatusUrlError');\nexport const NoProviderParamsError = createErrorClass('NoProviderParamsError');\nexport const SetParamsError = createErrorClass('SetParamsError');\nexport const AddContextError = createErrorClass('AddContextError');\nexport const SetSignatureError = createErrorClass('SetSignatureError');\nexport const GetAppCallbackUrlError = createErrorClass(\"GetAppCallbackUrlError\");\nexport const StatusUrlError = createErrorClass('StatusUrlError');\nexport const InavlidParametersError = createErrorClass('InavlidParametersError');\nexport const ProofSubmissionFailedError = createErrorClass('ProofSubmissionFailedError');","// Define the possible log levels\nexport type LogLevel = 'info' | 'warn' | 'error' | 'silent';\n\n// Define a simple logger class\nclass SimpleLogger {\n  private level: LogLevel = 'info';\n\n  setLevel(level: LogLevel) {\n    this.level = level;\n  }\n\n  private shouldLog(messageLevel: LogLevel): boolean {\n    const levels: LogLevel[] = ['error', 'warn', 'info', 'silent'];\n    return levels.indexOf(this.level) >= levels.indexOf(messageLevel);\n  }\n\n  private log(level: LogLevel, message: string, ...args: any[]) {\n    if (this.shouldLog(level) && this.level !== 'silent') {\n      const logFunction = this.getLogFunction(level);\n      console.log('current level', this.level);\n      logFunction(`[${level.toUpperCase()}]`, message, ...args);\n    }\n  }\n\n  private getLogFunction(level: LogLevel): (message?: any, ...optionalParams: any[]) => void {\n    switch (level) {\n      case 'error':\n        return console.error;\n      case 'warn':\n        return console.warn;\n      case 'info':\n        return console.info;\n      default:\n        return () => {}; // No-op for 'silent'\n    }\n  }\n\n  info(message: string, ...args: any[]) {\n    this.log('info', message, ...args);\n  }\n\n  warn(message: string, ...args: any[]) {\n    this.log('warn', message, ...args);\n  }\n\n  error(message: string, ...args: any[]) {\n    this.log('error', message, ...args);\n  }\n}\n\n// Create the logger instance\nconst logger = new SimpleLogger();\n\n// Function to set the log level\nexport function setLogLevel(level: LogLevel) {\n  logger.setLevel(level);\n}\n\n// Export the logger instance and the setLogLevel function\nexport default {\n  logger,\n  setLogLevel\n};\n","import { OnError } from './types'\nimport { TimeoutError } from './errors'\nimport loggerModule from './logger'\nconst logger = loggerModule.logger\n\n/**\n * Escapes special characters in a string for use in a regular expression\n * @param string - The input string to escape\n * @returns The input string with special regex characters escaped\n */\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * Replaces all occurrences of a substring in a string\n * @param str - The original string\n * @param find - The substring to find\n * @param replace - The string to replace the found substrings with\n * @returns A new string with all occurrences of 'find' replaced by 'replace'\n */\nexport function replaceAll(str: string, find: string, replace: string): string {\n  if (find === '') return str;\n  return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n\n/**\n * Schedules a task to end an interval after a specified timeout\n * @param sessionId - The ID of the current session\n * @param intervals - A Map containing the intervals\n * @param onFailureCallback - Callback function to be called on failure\n * @param timeout - Timeout in milliseconds (default: 10 minutes)\n */\nexport function scheduleIntervalEndingTask(\n    sessionId: string,\n    intervals: Map<string, NodeJS.Timer>,\n    onFailureCallback: OnError,\n    timeout: number = 1000 * 60 * 10\n): void {\n    setTimeout(() => {\n        if (intervals.has(sessionId)) {\n            const message = 'Interval ended without receiving proofs'\n            onFailureCallback(new TimeoutError(message))\n            logger.info(message)\n            clearInterval(intervals.get(sessionId) as NodeJS.Timeout)\n            intervals.delete(sessionId)\n        }\n    }, timeout)\n}\n","// Base URL for the backend API\nexport let BACKEND_BASE_URL = \"https://api.reclaimprotocol.org\";\n\nexport function setBackendBaseUrl(url: string) {\n    BACKEND_BASE_URL = url;\n}\n\n// Constant values used throughout the application\nexport const constants = {\n    // Default callback URL for Reclaim protocol\n    get DEFAULT_RECLAIM_CALLBACK_URL() {\n        return `${BACKEND_BASE_URL}/api/sdk/callback?callbackId=`;\n    },\n\n    // Default status URL for Reclaim sessions\n    get DEFAULT_RECLAIM_STATUS_URL() {\n        return `${BACKEND_BASE_URL}/api/sdk/session/`;\n    },\n\n    // URL for sharing Reclaim templates\n    RECLAIM_SHARE_URL: 'https://share.reclaimprotocol.org/verifier/?template='\n};\n","import { ethers } from \"ethers\";\nimport { InavlidParametersError, InvalidParamError, InvalidSignatureError } from \"./errors\";\nimport canonicalize from 'canonicalize'\nimport { Context } from \"./interfaces\";\nimport loggerModule from './logger';\nimport { ProofRequestOptions } from \"./types\";\nconst logger = loggerModule.logger;\n\n/**\n * Validates function parameters based on specified criteria\n * @param params - An array of objects containing input, paramName, and optional isString flag\n * @param functionName - The name of the function being validated\n * @throws InvalidParamError if any parameter fails validation\n */\nexport function validateFunctionParams(params: { input: any, paramName: string, isString?: boolean }[], functionName: string): void {\n  params.forEach(({ input, paramName, isString }) => {\n    if (input == null) {\n      logger.info(`Validation failed: ${paramName} in ${functionName} is null or undefined`);\n      throw new InvalidParamError(`${paramName} passed to ${functionName} must not be null or undefined.`);\n    }\n    if (isString && typeof input !== 'string') {\n      logger.info(`Validation failed: ${paramName} in ${functionName} is not a string`);\n      throw new InvalidParamError(`${paramName} passed to ${functionName} must be a string.`);\n    }\n    if (isString && input.trim() === '') {\n      logger.info(`Validation failed: ${paramName} in ${functionName} is an empty string`);\n      throw new InvalidParamError(`${paramName} passed to ${functionName} must not be an empty string.`);\n    }\n  });\n}\n\n\n// validate the parameters\n/** \n * Validates the parameters object\n * @param parameters - The parameters object to validate\n * @throws InavlidParametersError if the parameters object is not valid\n */\nexport function validateParameters(parameters: { [key: string]: string }): void {\n  try {\n    // check if the parameters is an object of key value pairs of string and string\n    if (typeof parameters !== 'object' || parameters === null) {\n      logger.info(`Parameters validation failed: Provided parameters is not an object`);\n      throw new InavlidParametersError(`The provided parameters is not an object`);\n    }\n    // check each key and value in the parameters object\n    for (const [key, value] of Object.entries(parameters)) {\n      if (typeof key !== 'string' || typeof value !== 'string') {\n        logger.info(`Parameters validation failed: Provided parameters is not an object of key value pairs of string and string`);\n        throw new InavlidParametersError(`The provided parameters is not an object of key value pairs of string and string`);\n      }\n    }\n  } catch (e) {\n    logger.info(`Parameters validation failed: ${(e as Error).message}`);\n    throw new InavlidParametersError(`Invalid parameters passed to validateParameters.`, e as Error);\n  }\n}\n\n\n/**\n* Validates a URL string\n* @param url - The URL to validate\n* @param functionName - The name of the function calling this validation\n* @throws InvalidParamError if the URL is invalid or empty\n*/\nexport function validateURL(url: string, functionName: string): void {\n  try {\n    new URL(url);\n  } catch (e) {\n    logger.info(`URL validation failed for ${url} in ${functionName}: ${(e as Error).message}`);\n    throw new InvalidParamError(`Invalid URL format ${url} passed to ${functionName}.`, e as Error);\n  }\n}\n\n/**\n* Validates a signature against the provided application ID\n* @param providerId - The ID of the provider\n* @param signature - The signature to validate\n* @param applicationId - The expected application ID\n* @param timestamp - The timestamp of the signature\n* @throws InvalidSignatureError if the signature is invalid or doesn't match the application ID\n*/\nexport function validateSignature(providerId: string, signature: string, applicationId: string, timestamp: string): void {\n  try {\n    logger.info(`Starting signature validation for providerId: ${providerId}, applicationId: ${applicationId}, timestamp: ${timestamp}`);\n\n    const message = canonicalize({ providerId, timestamp });\n    if (!message) {\n      logger.info('Failed to canonicalize message for signature validation');\n      throw new Error('Failed to canonicalize message');\n    }\n    const messageHash = ethers.keccak256(new TextEncoder().encode(message));\n    let appId = ethers.verifyMessage(\n      ethers.getBytes(messageHash),\n      ethers.hexlify(signature)\n    ).toLowerCase();\n\n    if (ethers.getAddress(appId) !== ethers.getAddress(applicationId)) {\n      logger.info(`Signature validation failed: Mismatch between derived appId (${appId}) and provided applicationId (${applicationId})`);\n      throw new InvalidSignatureError(`Signature does not match the application id: ${appId}`);\n    }\n\n    logger.info(`Signature validated successfully for applicationId: ${applicationId}`);\n  } catch (err) {\n    logger.info(`Signature validation failed: ${(err as Error).message}`);\n    if (err instanceof InvalidSignatureError) {\n      throw err;\n    }\n    throw new InvalidSignatureError(`Failed to validate signature: ${(err as Error).message}`);\n  }\n}\n\n\n/**\n * Validates the context object\n * @param context - The context object to validate\n * @throws InvalidParamError if the context object is not valid\n */\nexport function validateContext(context: Context): void {\n  if (!context.contextAddress) {\n    logger.info(`Context validation failed: Provided context address in context is not valid`);\n    throw new InvalidParamError(`The provided context address in context is not valid`);\n  }\n\n  if (!context.contextMessage) {\n    logger.info(`Context validation failed: Provided context message in context is not valid`);\n    throw new InvalidParamError(`The provided context message in context is not valid`);\n  }\n\n  validateFunctionParams([\n    { input: context.contextAddress, paramName: 'contextAddress', isString: true },\n    { input: context.contextMessage, paramName: 'contextMessage', isString: true }\n  ], 'validateContext');\n}\n\n/**\n * Validates the options object\n * @param options - The options object to validate\n * @throws InvalidParamError if the options object is not valid\n */\nexport function validateOptions(options: ProofRequestOptions): void {\n  if (options.acceptAiProviders && typeof options.acceptAiProviders !== 'boolean') {\n    logger.info(`Options validation failed: Provided acceptAiProviders in options is not valid`);\n    throw new InvalidParamError(`The provided acceptAiProviders in options is not valid`);\n  }\n\n  if (options.log && typeof options.log !== 'boolean') {\n    logger.info(`Options validation failed: Provided log in options is not valid`);\n    throw new InvalidParamError(`The provided log in options is not valid`);\n  }\n}\n\n\n\n","import {\n  InitSessionError,\n  UpdateSessionError,\n  StatusUrlError\n} from \"./errors\";\nimport { InitSessionResponse, SessionStatus, StatusUrlResponse } from \"./types\";\nimport { validateFunctionParams } from \"./validationUtils\";\nimport { BACKEND_BASE_URL, constants } from './constants';\nimport loggerModule from './logger';\nconst logger = loggerModule.logger;\n\n/**\n * Initializes a session with the provided parameters\n * @param providerId - The ID of the provider\n * @param appId - The ID of the application\n * @param timestamp - The timestamp of the request\n * @param signature - The signature for authentication\n * @returns A promise that resolves to an InitSessionResponse\n * @throws InitSessionError if the session initialization fails\n */\nexport async function initSession(\n  providerId: string,\n  appId: string,\n  timestamp: string,\n  signature: string\n): Promise<InitSessionResponse> {\n  logger.info(`Initializing session for providerId: ${providerId}, appId: ${appId}`);\n  try {\n    const response = await fetch(`${BACKEND_BASE_URL}/api/sdk/init/session/`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ providerId, appId, timestamp, signature })\n    });\n\n    const res = await response.json();\n\n    if (!response.ok) {\n      logger.info(`Session initialization failed: ${res.message || 'Unknown error'}`);\n      throw new InitSessionError(res.message || `Error initializing session with providerId: ${providerId}`);\n    }\n\n    return res as InitSessionResponse;\n  } catch (err) {\n    logger.info(`Failed to initialize session for providerId: ${providerId}, appId: ${appId}`, err);\n    throw err;\n  }\n}\n\n/**\n * Updates the status of an existing session\n * @param sessionId - The ID of the session to update\n * @param status - The new status of the session\n * @returns A promise that resolves to the update response\n * @throws UpdateSessionError if the session update fails\n */\nexport async function updateSession(sessionId: string, status: SessionStatus) {\n  logger.info(`Updating session status for sessionId: ${sessionId}, new status: ${status}`);\n  validateFunctionParams(\n    [{ input: sessionId, paramName: 'sessionId', isString: true }],\n    'updateSession'\n  );\n\n  try {\n    const response = await fetch(`${BACKEND_BASE_URL}/api/sdk/update/session/`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ sessionId, status })\n    });\n\n    const res = await response.json();\n\n    if (!response.ok) {\n      const errorMessage = `Error updating session with sessionId: ${sessionId}. Status Code: ${response.status}`;\n      logger.info(errorMessage, res);\n      throw new UpdateSessionError(errorMessage);\n    }\n\n    logger.info(`Session status updated successfully for sessionId: ${sessionId}`);\n    return res;\n  } catch (err) {\n    const errorMessage = `Failed to update session with sessionId: ${sessionId}`;\n    logger.info(errorMessage, err);\n    throw new UpdateSessionError(`Error updating session with sessionId: ${sessionId}`);\n  }\n}\n\n/**\n * Fetches the status URL for a given session ID\n * @param sessionId - The ID of the session to fetch the status URL for\n * @returns A promise that resolves to a StatusUrlResponse\n * @throws StatusUrlError if the status URL fetch fails\n */\nexport async function fetchStatusUrl(sessionId: string): Promise<StatusUrlResponse> {\n  validateFunctionParams(\n    [{ input: sessionId, paramName: 'sessionId', isString: true }],\n    'fetchStatusUrl'\n  );\n\n  try {\n    const response = await fetch(`${constants.DEFAULT_RECLAIM_STATUS_URL}${sessionId}`, {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n    const res = await response.json();\n\n    if (!response.ok) {\n      const errorMessage = `Error fetching status URL for sessionId: ${sessionId}. Status Code: ${response.status}`;\n      logger.info(errorMessage, res);\n      throw new StatusUrlError(errorMessage);\n    }\n\n    return res as StatusUrlResponse;\n  } catch (err) {\n    const errorMessage = `Failed to fetch status URL for sessionId: ${sessionId}`;\n    logger.info(errorMessage, err);\n    throw new StatusUrlError(`Error fetching status URL for sessionId: ${sessionId}`);\n  }\n}\n\n\n","import { ethers } from \"ethers\";\nimport { WitnessData } from \"./interfaces\";\nimport { SignedClaim, TemplateData } from \"./types\";\nimport { createSignDataForClaim, fetchWitnessListForClaim } from \"../witness\";\nimport { BACKEND_BASE_URL, constants } from \"./constants\";\nimport { replaceAll } from \"./helper\";\nimport { validateURL } from \"./validationUtils\";\nimport { makeBeacon } from \"../smart-contract\";\nimport { ProofNotVerifiedError } from \"./errors\";\nimport loggerModule from './logger';\nconst logger = loggerModule.logger;\n\n\n/**\n * Retrieves a shortened URL for the given URL\n * @param url - The URL to be shortened\n * @returns A promise that resolves to the shortened URL, or the original URL if shortening fails\n */\nexport async function getShortenedUrl(url: string): Promise<string> {\n  logger.info(`Attempting to shorten URL: ${url}`);\n  try {\n    validateURL(url, 'getShortenedUrl')\n    const response = await fetch(`${BACKEND_BASE_URL}/api/sdk/shortener`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ fullUrl: url })\n    })\n    const res = await response.json()\n    if (!response.ok) {\n      logger.info(`Failed to shorten URL: ${url}, Response: ${JSON.stringify(res)}`);\n      return url;\n    }\n    const shortenedVerificationUrl = res.result.shortUrl\n    return shortenedVerificationUrl\n  } catch (err) {\n    logger.info(`Error shortening URL: ${url}, Error: ${err}`);\n    return url\n  }\n}\n\n/**\n * Creates a link with embedded template data\n * @param templateData - The data to be embedded in the link\n * @returns A promise that resolves to the created link (shortened if possible)\n */\nexport async function createLinkWithTemplateData(templateData: TemplateData): Promise<string> {\n  let template = encodeURIComponent(JSON.stringify(templateData))\n  template = replaceAll(template, '(', '%28')\n  template = replaceAll(template, ')', '%29')\n\n  const fullLink = `${constants.RECLAIM_SHARE_URL}${template}`\n  try {\n    const shortenedLink = await getShortenedUrl(fullLink)\n    return shortenedLink;\n  } catch (err) {\n    logger.info(`Error creating link for sessionId: ${templateData.sessionId}, Error: ${err}`);\n    return fullLink;\n  }\n}\n\n/**\n * Retrieves the list of witnesses for a given claim\n * @param epoch - The epoch number\n * @param identifier - The claim identifier\n * @param timestampS - The timestamp in seconds\n * @returns A promise that resolves to an array of witness addresses\n * @throws Error if no beacon is available\n */\nexport async function getWitnessesForClaim(\n  epoch: number,\n  identifier: string,\n  timestampS: number\n): Promise<string[]> {\n  const beacon = makeBeacon()\n  if (!beacon) {\n    logger.info('No beacon available for getting witnesses');\n    throw new Error('No beacon available');\n  }\n  const state = await beacon.getState(epoch)\n  const witnessList = fetchWitnessListForClaim(state, identifier, timestampS)\n  const witnesses = witnessList.map((w: WitnessData) => w.id.toLowerCase())\n  return witnesses;\n}\n\n/**\n * Recovers the signers' addresses from a signed claim\n * @param claim - The signed claim object\n * @param signatures - The signatures associated with the claim\n * @returns An array of recovered signer addresses\n */\nexport function recoverSignersOfSignedClaim({\n  claim,\n  signatures\n}: SignedClaim): string[] {\n  const dataStr = createSignDataForClaim({ ...claim })\n  const signers = signatures.map(signature =>\n    ethers.verifyMessage(dataStr, ethers.hexlify(signature)).toLowerCase()\n  )\n  return signers;\n}\n\n/**\n * Asserts that a signed claim is valid by checking if all expected witnesses have signed\n * @param claim - The signed claim to validate\n * @param expectedWitnessAddresses - An array of expected witness addresses\n * @throws ProofNotVerifiedError if any expected witness signature is missing\n */\nexport function assertValidSignedClaim(\n  claim: SignedClaim,\n  expectedWitnessAddresses: string[]\n): void {\n  const witnessAddresses = recoverSignersOfSignedClaim(claim)\n  const witnessesNotSeen = new Set(expectedWitnessAddresses)\n  for (const witness of witnessAddresses) {\n    if (witnessesNotSeen.has(witness)) {\n      witnessesNotSeen.delete(witness)\n    }\n  }\n\n  if (witnessesNotSeen.size > 0) {\n    const missingWitnesses = Array.from(witnessesNotSeen).join(', ');\n    logger.info(`Claim validation failed. Missing signatures from: ${missingWitnesses}`);\n    throw new ProofNotVerifiedError(\n      `Missing signatures from ${missingWitnesses}`\n    )\n  }\n}","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n\nimport { Contract } from 'ethers';\n\nconst _abi = [\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'previousAdmin',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'address',\n        name: 'newAdmin',\n        type: 'address',\n      },\n    ],\n    name: 'AdminChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'beacon',\n        type: 'address',\n      },\n    ],\n    name: 'BeaconUpgraded',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        components: [\n          {\n            internalType: 'uint32',\n            name: 'id',\n            type: 'uint32',\n          },\n          {\n            internalType: 'uint32',\n            name: 'timestampStart',\n            type: 'uint32',\n          },\n          {\n            internalType: 'uint32',\n            name: 'timestampEnd',\n            type: 'uint32',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'addr',\n                type: 'address',\n              },\n              {\n                internalType: 'string',\n                name: 'host',\n                type: 'string',\n              },\n            ],\n            internalType: 'struct Reclaim.Witness[]',\n            name: 'witnesses',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint8',\n            name: 'minimumWitnessesForClaimCreation',\n            type: 'uint8',\n          },\n        ],\n        indexed: false,\n        internalType: 'struct Reclaim.Epoch',\n        name: 'epoch',\n        type: 'tuple',\n      },\n    ],\n    name: 'EpochAdded',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: 'uint8',\n        name: 'version',\n        type: 'uint8',\n      },\n    ],\n    name: 'Initialized',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'previousOwner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'OwnershipTransferred',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'implementation',\n        type: 'address',\n      },\n    ],\n    name: 'Upgraded',\n    type: 'event',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'witnessAddress',\n        type: 'address',\n      },\n      {\n        internalType: 'string',\n        name: 'host',\n        type: 'string',\n      },\n    ],\n    name: 'addAsWitness',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'addNewEpoch',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint32',\n        name: 'epochNum',\n        type: 'uint32',\n      },\n      {\n        components: [\n          {\n            internalType: 'string',\n            name: 'provider',\n            type: 'string',\n          },\n          {\n            internalType: 'string',\n            name: 'parameters',\n            type: 'string',\n          },\n          {\n            internalType: 'string',\n            name: 'context',\n            type: 'string',\n          },\n        ],\n        internalType: 'struct Claims.ClaimInfo',\n        name: 'claimInfo',\n        type: 'tuple',\n      },\n      {\n        components: [\n          {\n            internalType: 'bytes32',\n            name: 'identifier',\n            type: 'bytes32',\n          },\n          {\n            internalType: 'address',\n            name: 'owner',\n            type: 'address',\n          },\n          {\n            internalType: 'uint32',\n            name: 'timestampS',\n            type: 'uint32',\n          },\n          {\n            internalType: 'uint256',\n            name: 'epoch',\n            type: 'uint256',\n          },\n        ],\n        internalType: 'struct Claims.CompleteClaimData',\n        name: 'claimData',\n        type: 'tuple',\n      },\n      {\n        internalType: 'bytes[]',\n        name: 'signatures',\n        type: 'bytes[]',\n      },\n    ],\n    name: 'assertValidEpochAndSignedClaim',\n    outputs: [],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'currentEpoch',\n    outputs: [\n      {\n        internalType: 'uint32',\n        name: '',\n        type: 'uint32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'epochDurationS',\n    outputs: [\n      {\n        internalType: 'uint32',\n        name: '',\n        type: 'uint32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    name: 'epochs',\n    outputs: [\n      {\n        internalType: 'uint32',\n        name: 'id',\n        type: 'uint32',\n      },\n      {\n        internalType: 'uint32',\n        name: 'timestampStart',\n        type: 'uint32',\n      },\n      {\n        internalType: 'uint32',\n        name: 'timestampEnd',\n        type: 'uint32',\n      },\n      {\n        internalType: 'uint8',\n        name: 'minimumWitnessesForClaimCreation',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint32',\n        name: 'epoch',\n        type: 'uint32',\n      },\n    ],\n    name: 'fetchEpoch',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'uint32',\n            name: 'id',\n            type: 'uint32',\n          },\n          {\n            internalType: 'uint32',\n            name: 'timestampStart',\n            type: 'uint32',\n          },\n          {\n            internalType: 'uint32',\n            name: 'timestampEnd',\n            type: 'uint32',\n          },\n          {\n            components: [\n              {\n                internalType: 'address',\n                name: 'addr',\n                type: 'address',\n              },\n              {\n                internalType: 'string',\n                name: 'host',\n                type: 'string',\n              },\n            ],\n            internalType: 'struct Reclaim.Witness[]',\n            name: 'witnesses',\n            type: 'tuple[]',\n          },\n          {\n            internalType: 'uint8',\n            name: 'minimumWitnessesForClaimCreation',\n            type: 'uint8',\n          },\n        ],\n        internalType: 'struct Reclaim.Epoch',\n        name: '',\n        type: 'tuple',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint32',\n        name: 'epoch',\n        type: 'uint32',\n      },\n      {\n        internalType: 'bytes32',\n        name: 'identifier',\n        type: 'bytes32',\n      },\n      {\n        internalType: 'uint32',\n        name: 'timestampS',\n        type: 'uint32',\n      },\n    ],\n    name: 'fetchWitnessesForClaim',\n    outputs: [\n      {\n        components: [\n          {\n            internalType: 'address',\n            name: 'addr',\n            type: 'address',\n          },\n          {\n            internalType: 'string',\n            name: 'host',\n            type: 'string',\n          },\n        ],\n        internalType: 'struct Reclaim.Witness[]',\n        name: '',\n        type: 'tuple[]',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'initialize',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'minimumWitnessesForClaimCreation',\n    outputs: [\n      {\n        internalType: 'uint8',\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'owner',\n    outputs: [\n      {\n        internalType: 'address',\n        name: '',\n        type: 'address',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'proxiableUUID',\n    outputs: [\n      {\n        internalType: 'bytes32',\n        name: '',\n        type: 'bytes32',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'witnessAddress',\n        type: 'address',\n      },\n    ],\n    name: 'removeAsWitness',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'renounceOwnership',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'newOwner',\n        type: 'address',\n      },\n    ],\n    name: 'transferOwnership',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n      {\n        internalType: 'bool',\n        name: 'isWhitelisted',\n        type: 'bool',\n      },\n    ],\n    name: 'updateWitnessWhitelist',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'newImplementation',\n        type: 'address',\n      },\n    ],\n    name: 'upgradeTo',\n    outputs: [],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'newImplementation',\n        type: 'address',\n      },\n      {\n        internalType: 'bytes',\n        name: 'data',\n        type: 'bytes',\n      },\n    ],\n    name: 'upgradeToAndCall',\n    outputs: [],\n    stateMutability: 'payable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    name: 'witnesses',\n    outputs: [\n      {\n        internalType: 'address',\n        name: 'addr',\n        type: 'address',\n      },\n      {\n        internalType: 'string',\n        name: 'host',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n] as const;\n\nexport class Reclaim__factory {\n  static readonly abi = _abi;\n\n  static connect(address: string, signerOrProvider: any): Contract {\n    return new Contract(address, _abi, signerOrProvider);\n  }\n}\n","{\n  \"0x1a4\": {\n    \"chainName\": \"opt-goerli\",\n    \"address\": \"0xF93F605142Fb1Efad7Aa58253dDffF67775b4520\",\n    \"rpcUrl\": \"https://opt-goerli.g.alchemy.com/v2/rksDkSUXd2dyk2ANy_zzODknx_AAokui\"\n  },\n  \"0xaa37dc\": {\n    \"chainName\": \"opt-sepolia\",\n    \"address\": \"0x6D0f81BDA11995f25921aAd5B43359630E65Ca96\",\n    \"rpcUrl\": \"https://opt-sepolia.g.alchemy.com/v2/aO1-SfG4oFRLyAiLREqzyAUu0HTCwHgs\"\n}\n\n}\n","import type { Beacon, BeaconState } from './utils/interfaces';\nimport { Reclaim__factory as ReclaimFactory } from './contract-types';\nimport CONTRACTS_CONFIG from './contract-types/config.json';\nimport { Contract, ethers } from 'ethers';\n\nconst DEFAULT_CHAIN_ID = 11155420;\n\nexport function makeBeacon(chainId?: number): Beacon | undefined {\n  chainId = chainId || DEFAULT_CHAIN_ID;\n  const contract = getContract(chainId);\n  if (contract) {\n    return makeBeaconCacheable({\n      async getState(epochId: number | undefined): Promise<BeaconState> {\n        //@ts-ignore\n        const epoch = await contract.fetchEpoch(epochId || 0);\n        if (!epoch.id) {\n          throw new Error(`Invalid epoch ID: ${epochId}`);\n        }\n\n        return {\n          epoch: epoch.id,\n          witnesses: epoch.witnesses.map((w: any) => ({\n            id: w.addr.toLowerCase(),\n            url: w.host,\n          })),\n          witnessesRequiredForClaim: epoch.minimumWitnessesForClaimCreation,\n          nextEpochTimestampS: epoch.timestampEnd,\n        };\n      },\n    });\n  } else {\n    return undefined;\n  }\n}\n\nexport function makeBeaconCacheable(beacon: Beacon): Beacon {\n  const cache: { [epochId: number]: Promise<BeaconState> } = {};\n\n  return {\n    ...beacon,\n    async getState(epochId: number | undefined): Promise<BeaconState> {\n      if (!epochId) {\n        // TODO: add cache here\n        const state = await beacon.getState();\n        return state;\n      }\n\n      const key = epochId;\n\n      if (!cache[key]) {\n        cache[key] = beacon.getState(epochId);\n      }\n\n      return cache[key] as unknown as BeaconState;\n    },\n  };\n}\n\nconst existingContractsMap: { [chain: string]: Contract } = {};\n\nfunction getContract(chainId: number): Contract {\n  const chainKey = `0x${chainId.toString(16)}`;\n  if (!existingContractsMap[chainKey]) {\n    const contractData =\n      CONTRACTS_CONFIG[chainKey as keyof typeof CONTRACTS_CONFIG];\n    if (!contractData) {\n      throw new Error(`Unsupported chain: \"${chainKey}\"`);\n    }\n\n    const rpcProvider = new ethers.JsonRpcProvider(contractData.rpcUrl);\n    existingContractsMap[chainKey] = ReclaimFactory.connect(\n      contractData.address,\n      rpcProvider\n    );\n  }\n\n  return existingContractsMap[chainKey] as Contract;\n}\n"],"mappings":"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","names":["exports","module","ClaimCreationType","import_ethers","import_canonicalize","logger","import_ethers","logger","canonicalize","logger","import_ethers","import_ethers","import_ethers","logger","logger","proof","canonicalize","sdkVersion"]}